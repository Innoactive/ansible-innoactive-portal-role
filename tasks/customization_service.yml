---
- name: Get Client Credentials for Customization Service
  block:
    - name: Create / Determine existing client credentials in Application
      shell: "{{ lookup('template', 'register_oauth_client.sh.j2') }}" # noqa 305
      vars:
        client_name: Customization Service
        client_id: "{{ customization_configuration.oauth2_client_id }}"
        client_secret: "{{ customization_configuration.oauth2_client_secret }}"
        redirect_uris:
          - "{{ hub_configuration.protocol }}://%s/services/customization/hub/callback/' % '{{ hub_configuration.primary_hostname }}"
          - "{{ hub_configuration.protocol }}://%s/hub_services/customization/hub/callback/' % '{{ hub_configuration.primary_hostname }}"
          - "{{ hub_configuration.protocol }}://%s/hub/callback/' % '{{ customization_configuration.hostname }}"
      register: customization_oauth2_client_output
      changed_when: customization_oauth2_client_output.stdout | from_json | json_query('changed')
      # ansible lint has an issue where it cannot bypass rules (like 305) within blocks
      # see https://github.com/ansible/ansible-lint/issues/484, so we need to explicitly skip
      tags:
        - skip_ansible_lint
        - requires_database

    - name: Identify Client Id for Customization Service
      set_fact:
        customization_oauth2_client_id: "{{ customization_oauth2_client_output.stdout | from_json | json_query('client_id') }}"
        customization_oauth2_client_secret: "{{ customization_oauth2_client_output.stdout | from_json | json_query('client_secret') }}"

    - name: Validate client credentials
      assert:
        that:
          - customization_oauth2_client_id | default('', true) | length > 0
          - customization_oauth2_client_secret | default('', true) | length > 0

- name: Create a volume to hold the customization files (images etc.)
  docker_volume:
    name: "{{ volume_names.customization }}"

- name: Start Customization Service
  docker_container:
    name: "{{ container_names.customization }}"
    image: "{{ image_versions.customization }}"
    # pull image if version is latest
    pull: "{{ (image_versions.customization | default(':', True)).split(':')[1] == 'latest' }}"
    restart_policy: unless-stopped
    volumes:
      - "{{ volume_names.customization }}:/usr/app/media"
    exposed_ports:
      - "80"
    env:
      API_ROOT: "{{ hub_configuration.protocol }}://{{ hub_configuration.primary_hostname }}"
      CUSTOMIZATION_API_ROOT: "{{ hub_configuration.protocol }}://{{ customization_configuration.hostname }}/api"
      DB_HOST: db
      DB_NAME: customization
      DB_PASSWORD: postgres
      DB_USER: postgres
      LETSENCRYPT_HOST: "{{ customization_configuration.hostname }}"
      OAUTH_CLIENT_ID: "{{ customization_oauth2_client_id }}"
      OAUTH_CLIENT_SECRET: "{{ customization_oauth2_client_secret }}"
      VIRTUAL_HOST: "{{ customization_configuration.hostname }}"
    networks_cli_compatible: true
    networks:
      - name: "{{ network_names.main }}"

- name: Setup Database
  become: true
  # yamllint disable rule:line-length
  command: "docker exec {{ container_names.customization }} python manage.py create_db"
  # yamllint enable rule:line-length
  when: hub_configuration.setup_database
  # TODO: technically, this is not correct, it should only be changed if database has been created for the first time
  changed_when: false
  tags:
    - setup_tasks

- name: Run Database migrations
  become: true
  # yamllint disable rule:line-length
  command: "docker exec {{ container_names.customization }} python manage.py migrate"
  # yamllint enable rule:line-length
  when: hub_configuration.setup_database
  register: customization_migration_result
  changed_when: '"Applying" in customization_migration_result.stdout'
  tags:
    - setup_tasks

- name: Collect static files for Customization Service
  become: true
  # yamllint disable rule:line-length
  command: "docker exec {{ container_names.customization }} python manage.py collectstatic -v 0 -c --no-input"
  # yamllint enable rule:line-length
  # TODO: technically, this is not correct, it should only be changed if no files are collected
  changed_when: false
  tags:
    - setup_tasks

- name: Enable Customization Micro Frontend
  become: true
  shell: "{{ lookup('template', 'run_in_django_shell.sh.j2') }}" # noqa 305
  vars:
    python_script_name: enable_micro_frontend
    micro_frontend:
      name: Discovery Portal Customization
      menu_entry_name: Customization
      url_prefix: customization
      fa_icon: paint-brush
      script_url: "{{ hub_configuration.protocol }}://{{ customization_configuration.hostname }}/main.js"
      init_function: customizationAppRender
  register: customization_micro_frontend_raw
  changed_when: customization_micro_frontend_raw.stdout | trim | bool
  when: ('latest' in hub_image_version) or (hub_image_version is version('1.20.0', '>='))
  tags:
    - setup_tasks
