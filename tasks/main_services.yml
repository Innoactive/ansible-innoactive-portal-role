---
- name: Setup required data volumes
  become: true
  import_tasks: data_volumes.yml

- name: Collect environment variables for the main application server
  set_fact:
    base_server_environment_variables:
      VIRTUAL_PORT: "8000"
      DJANGO_ALLOWED_HOSTS: "{{ hub_configuration.hostname | mandatory }}"
      DJANGO_SECRET_KEY: "{{ hub_configuration.secret_key | mandatory }}"
      FROM_EMAIL: "{{ hub_configuration.admin_email | mandatory }}"
      LETSENCRYPT_HOST: "{{ hub_configuration.hostname | mandatory }}"
      RAVEN_DSN: "{{ hub_configuration.sentry_dsn | default('') }}"
      GOOGLE_ANALYTICS_TRACKING_ID: "{{ hub_configuration.google_analytics_id | default('') }}"
      HUB_OFFERING: "{{ hub_configuration.hub_offering | mandatory }}"
      OAUTH2_ALLOW_CONCURRENT_ACCESS_TOKENS: "{{ hub_configuration.concurrent_access_tokens | bool | mandatory | string }}"

- name: Upload JWT Server certificates
  copy:
    src: "{{ jwt_local_key_path }}/"
    dest: "{{ jwt_key_path }}/"
  when:
  - jwt_key_path | default('', true) | trim | length > 0
  - jwt_local_key_path | default('', true) | trim | length > 0

- name: Add jwt keys
  vars:
    jwt_environment_variables:
      JWT_PRIVATE_KEY_PATH: "{{ jwt_key_path + '/' + jwt_privatekey }}"
      JWT_PUBLIC_KEY_PATH: "{{ jwt_key_path + '/' + jwt_publickey }}"
  set_fact:
    base_server_environment_variables: "{{ base_server_environment_variables | combine (jwt_environment_variables) }}"
  when:
  - jwt_key_path | default('', true) | trim | length > 0
  - jwt_local_key_path | default('', true) | trim | length > 0

- name: Start Django Application Server
  vars:
    application_server_specific_environment_variables:
      VIRTUAL_PROTO: uwsgi
      VIRTUAL_HOST: "{{ hub_configuration.hostname | mandatory }}"
  docker_container:
    name: "{{ container_names.main }}"
    image: "{{ image_versions.hub }}"
    # pull image if version is latest
    pull: "{{ (image_versions.hub | default(':', True)).split(':')[1].startswith('latest') }}"
    restart_policy: unless-stopped
    exposed_ports:
      - "8000"
    volumes:
      - "{{ volume_names.media }}:/media"
      - "{{ volume_names.static }}:/static"
      - "{{ jwt_key_path }}:{{ jwt_key_path }}"
    env: "{{ base_server_environment_variables | combine (application_server_specific_environment_variables) }}"
    command: supervisord -n -c /etc/supervisor/conf.d/supervisord.django.conf
    networks_cli_compatible: true
    networks:
      - name: "{{ network_names.main }}"
        aliases:
          - web

- name: Start Django Realtime Application Server
  vars:
    realtime_server_specific_environment_variables:
      NETWORK_ACCESS: internal
      VIRTUAL_PROTO: http
      VIRTUAL_HOST: channels
  docker_container:
    name: "{{ container_names.realtime }}"
    image: "{{ image_versions.hub }}"
    restart_policy: unless-stopped
    exposed_ports:
      - "8000"
    volumes:
      - "{{ volume_names.media }}:/media"
      - "{{ volume_names.static }}:/static"
      - "{{ jwt_key_path }}:{{ jwt_key_path }}"
    env: "{{ base_server_environment_variables | combine (realtime_server_specific_environment_variables) }}"
      # yamllint enable rule:line-length
    command: supervisord -n -c /etc/supervisor/conf.d/supervisord.channels.conf
    networks_cli_compatible: true
    networks:
      - name: "{{ network_names.main }}"
        aliases:
          - channels

- name: Run Database Migrations
  command: "docker exec {{ container_names.main }} python manage.py migrate"
  register: migration_result
  changed_when: '"Applying" in migration_result.stdout'
  when: hub_configuration.setup_database
  tags:
    - setup_tasks
    - requires_database

- name: Collect static files for WMC
  # yamllint disable rule:line-length
  command: "docker exec {{ container_names.main }} python manage.py collectstatic -v 0 -c --no-input"
  register: collect_static_result
  # yamllint enable rule:line-length
  when: hub_configuration.setup_wmc
  # TODO: technically, this is not correct, it should only be changed
  # if no files are collected but django doesn't tell us ...
  changed_when: false
  tags:
    - setup_tasks

# FIXME: This should be handled in the Django application setup automatically
- name: Change default Site name and domain
  shell: "{{ lookup('template', 'run_in_django_shell.sh.j2') }}" # noqa 305
  vars:
    python_script_name: change_site_name_and_domain
    site_name: "{{ hub_configuration.primary_hostname }}"
    domain: "{{ hub_configuration.primary_hostname }}"
  register: site_update_output
  changed_when: site_update_output.stdout | trim | bool
  tags:
    - setup_tasks
    - requires_database

# FIXME: This group should be delivered already within the software
- name: Setup Admin User Group with Permissions
  shell: "{{ lookup('template', 'run_in_django_shell.sh.j2') }}" # noqa 305
  vars:
    python_script_name: create_user_group_with_perms
    group_name: Admins
    perms:
      - core.superuser
  register: admin_group_output
  changed_when: admin_group_output.stdout | trim | bool
  tags:
    - setup_tasks
    - user_groups
    - defaults
    - requires_database

# FIXME: This group should be delivered already within the software
- name: Setup Default User Group with Permissions
  shell: "{{ lookup('template', 'run_in_django_shell.sh.j2') }}" # noqa 305
  vars:
    python_script_name: create_user_group_with_perms
    group_name: Users
    perms:
      - assets.view_application
      - assets.view_asset
      - assets.add_asset
      - assets.view_audio
      - assets.add_audio
      - assets.view_image
      - assets.add_image
      - assets.view_model
      - assets.add_model
      - assets.view_pdf
      - assets.add_pdf
      - assets.view_photo
      - assets.add_photo
      - assets.view_photoset
      - assets.add_photoset
      - assets.view_smartasset
      - assets.add_smartasset
      - assets.view_video
      - assets.add_video
      - core.view_space
      - core.change_space
      - core.add_space
  register: users_group_output
  changed_when: users_group_output.stdout | trim | bool
  tags:
    - setup_tasks
    - user_groups
    - defaults
    - requires_database

- name: Setup continuous Backup
  become: true
  import_tasks: continuous_backup.yml