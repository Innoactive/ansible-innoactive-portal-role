---
- name: Assert compatible Hub Version
  assert:
    that: hub_version.startswith('latest') or (hub_version is version('2.4.1', '>'))
    fail_msg: "This role version does only support Hub versions newer than 2.4.1"

- name: Setup required data volumes
  become: true
  import_tasks: data_volumes.yml

- name: Collect environment variables for the main application server
  set_fact:
    traefik_admin_alternative_hostnames: "{{ admin_configuration.alias_hostnames | map('regex_replace', '^(.*)$', '`\\1`') | join(',') }}"
    base_server_environment_variables:
      VIRTUAL_PORT: "8000"
      DJANGO_ALLOWED_HOSTS: "{{ ([admin_configuration.hostname] + admin_configuration.alias_hostnames) | join(',') | mandatory }}"
      DJANGO_SECRET_KEY: "{{ admin_configuration.secret_key | mandatory }}"
      FROM_EMAIL: "{{ admin_configuration.from_email | default(admin_configuration.admin_email, true) | mandatory }}"
      RAVEN_DSN: "{{ admin_configuration.sentry_dsn | default('') }}"
      GOOGLE_ANALYTICS_TRACKING_ID: "{{ admin_configuration.google_analytics_id | default('') }}"
      HUB_OFFERING: "{{ admin_configuration.hub_offering | mandatory }}"
      OAUTH2_ALLOW_CONCURRENT_ACCESS_TOKENS: "{{ admin_configuration.concurrent_access_tokens | bool | mandatory | string }}"
      EMAIL_HOST: "{{ mail_configuration.smtp.host }}"
      EMAIL_PORT: "{{ mail_configuration.smtp.port }}"
      EMAIL_USER: "{{ mail_configuration.smtp.user }}"
      EMAIL_PASSWORD: "{{ mail_configuration.smtp.password }}"
      EMAIL_USE_TLS: "{{ mail_configuration.smtp.use_tls | ternary('True', 'False') | string }}"
      EMAIL_USE_SSL: "{{ mail_configuration.smtp.use_ssl | ternary('True', 'False') | string }}"

- name: Support alternative hostnames
  set_fact:
    alternative_admin_hostnames_traefik_labels:
      # redirect alternative domains to primary
      # GET & HEAD (can be redirected)
      traefik.http.middlewares.redirect-alternative.redirectregex.regex: "(.*://)([^/]+)(.*)"
      traefik.http.middlewares.redirect-alternative.redirectregex.replacement: "${1}{{ admin_configuration.hostname }}${3}"
      traefik.http.routers.web-alternative.rule: Host({{ traefik_admin_alternative_hostnames }}) && Method(`GET`,`HEAD`)
      traefik.http.routers.web-alternative.middlewares: redirect-alternative
      traefik.http.routers.web-alternative.tls: "{{ letsencrypt | ternary('true', 'false') }}"
      traefik.http.routers.web-alternative.tls.certresolver: lets-encrypt

      # POST / PUT / PATCH / DELETE (cannot be redirected, because of failing preflight requests)
      traefik.http.routers.web-alternative-post.rule: Host({{ traefik_admin_alternative_hostnames }}) && Method(`POST`,`PUT`,`PATCH`,`DELETE`,`OPTIONS`)
      traefik.http.routers.web-alternative-post.tls: "{{ letsencrypt | ternary('true', 'false') }}"
      traefik.http.routers.web-alternative-post.tls.certresolver: lets-encrypt

      # Websocket Connections / Django-Channels
      traefik.http.routers.channels-alternative.rule: Host({{ traefik_admin_alternative_hostnames }}) && PathPrefix(`/ws`)
      traefik.http.routers.channels-alternative.tls: "{{ letsencrypt | ternary('true', 'false') }}"
      traefik.http.routers.channels-alternative.tls.certresolver: lets-encrypt
      traefik.http.routers.channels-alternative.priority: "100"
  when: admin_configuration.alias_hostnames | default([]) | length > 0

- name: Upload JWT Server certificates
  copy:
    src: "{{ jwt_local_key_path }}/"
    dest: "{{ jwt_key_path }}/"
  when:
    - jwt_key_path | default('', true) | trim | length > 0
    - jwt_local_key_path | default('', true) | trim | length > 0

- name: Add jwt keys
  vars:
    jwt_environment_variables:
      JWT_PRIVATE_KEY_PATH: "{{ jwt_key_path + '/' + jwt_privatekey }}"
      JWT_PUBLIC_KEY_PATH: "{{ jwt_key_path + '/' + jwt_publickey }}"
  set_fact:
    base_server_environment_variables: "{{ base_server_environment_variables | combine (jwt_environment_variables) }}"
  when:
    - jwt_key_path | default('', true) | trim | length > 0
    - jwt_local_key_path | default('', true) | trim | length > 0

- name: Start Django Application Server
  vars:
    traefik_labels:
      traefik.enable: "true"
      traefik.http.routers.web.rule: Host(`{{ admin_configuration.hostname }}`)
      traefik.http.routers.web.tls: "{{ letsencrypt | ternary('true', 'false') }}"
      traefik.http.routers.web.tls.certresolver: lets-encrypt

      # Websocket Connections / Django-Channels
      traefik.http.routers.channels.rule: Host(`{{ admin_configuration.hostname }}`) && PathPrefix(`/ws`)
      traefik.http.routers.channels.tls: "{{ letsencrypt | ternary('true', 'false') }}"
      traefik.http.routers.channels.tls.certresolver: lets-encrypt
    alternative_admin_domain_labels: "{{ alternative_admin_hostnames_traefik_labels | default({}) }}"
    redirect_http_labels: "{{ http_redirect_traefik_labels | default({}) }}"
  docker_container:
    name: "{{ container_names.main }}"
    image: "{{ image_versions.hub }}"
    # pull image if version is latest
    pull: "{{ hub_version.startswith('latest') }}"
    restart_policy: unless-stopped
    exposed_ports:
      - "8000"
    volumes:
      - "{{ volume_names.media }}:/media"
      - "{{ volume_names.static }}:/static"
      - "{{ jwt_key_path }}:{{ jwt_key_path }}"
    # yamllint disable rule:line-length
    env: "{{ base_server_environment_variables | combine(admin_configuration.extra_environment_variables) }}" # noqa 204
    # yamllint enable rule:line-length
    labels: "{{ traefik_labels | combine(alternative_admin_domain_labels) }}"
    networks_cli_compatible: true
    networks:
      - name: "{{ network_names.main }}"
        aliases:
          - web

- name: Run Database Migrations
  command: "docker exec {{ container_names.main }} python manage.py migrate"
  register: migration_result
  changed_when: '"Applying" in migration_result.stdout'
  when: admin_configuration.setup_database
  tags:
    - setup_tasks
    - requires_database

- name: Collect static files for WMC
  # yamllint disable rule:line-length
  command: "docker exec {{ container_names.main }} python manage.py collectstatic -v 0 -c --no-input"
  register: collect_static_result
  # yamllint enable rule:line-length
  when: admin_configuration.setup_wmc
  # TODO: technically, this is not correct, it should only be changed
  # if no files are collected but django doesn't tell us ...
  changed_when: false
  tags:
    - setup_tasks

# FIXME: This should be handled in the Django application setup automatically
- name: Change default Site name and domain
  shell: "{{ lookup('template', 'run_in_django_shell.sh.j2') }}" # noqa 305
  vars:
    python_script_name: change_site_name_and_domain
    site_name: "{{ admin_configuration.hostname }}"
    domain: "{{ admin_configuration.hostname }}"
  register: site_update_output
  changed_when: site_update_output.stdout | trim | bool
  tags:
    - setup_tasks
    - requires_database

# FIXME: This group should be delivered already within the software
- name: Setup Admin User Group with Permissions
  shell: "{{ lookup('template', 'run_in_django_shell.sh.j2') }}" # noqa 305
  vars:
    python_script_name: create_user_group_with_perms
    group_name: Admins
    perms:
      - core.superuser
  register: admin_group_output
  changed_when: admin_group_output.stdout | trim | bool
  tags:
    - setup_tasks
    - user_groups
    - defaults
    - requires_database

# FIXME: This group should be delivered already within the software
- name: Setup Default User Group with Permissions
  shell: "{{ lookup('template', 'run_in_django_shell.sh.j2') }}" # noqa 305
  vars:
    python_script_name: create_user_group_with_perms
    group_name: Users
    perms:
      - assets.view_application
      - assets.view_asset
      - assets.add_asset
      - assets.view_audio
      - assets.add_audio
      - assets.view_image
      - assets.add_image
      - assets.view_model
      - assets.add_model
      - assets.view_pdf
      - assets.add_pdf
      - assets.view_photo
      - assets.add_photo
      - assets.view_photoset
      - assets.add_photoset
      - assets.view_smartasset
      - assets.add_smartasset
      - assets.view_video
      - assets.add_video
      - core.view_space
      - core.change_space
      - core.add_space
  register: users_group_output
  changed_when: users_group_output.stdout | trim | bool
  tags:
    - setup_tasks
    - user_groups
    - defaults
    - requires_database
