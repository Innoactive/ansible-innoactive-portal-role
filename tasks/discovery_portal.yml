---
- name: Get Client Credentials for Discovery Portal Service
  block:
    - name: Create / Determine existing client credentials in Application
      shell: "{{ lookup('template', 'run_in_django_shell.sh.j2') }}" # noqa 305
      vars:
        python_script_name: get_oauth_client_credentials
        client_name: Application Discovery Portal
        client_id: false
        client_secret: false
        redirect_uris:
          - "{{ hub_configuration.protocol }}://%s/hub/callback/' % '{{ portal_configuration.hostname }}"
      register: discovery_portal_oauth2_client_output
      changed_when: discovery_portal_oauth2_client_output.stdout | from_json | json_query('changed')
      # ansible lint has an issue where it cannot bypass rules (like 305) within blocks
      # see https://github.com/ansible/ansible-lint/issues/484, so we need to explicitly skip
      tags:
        - skip_ansible_lint
        - requires_database

    - name: Identify Client Id for Discovery Portal
      set_fact:
        discovery_portal_oauth2_client_id: "{{ discovery_portal_oauth2_client_output.stdout | from_json | json_query('client_id') }}"
        discovery_portal_oauth2_client_secret: "{{ discovery_portal_oauth2_client_output.stdout | from_json | json_query('client_secret') }}"
  when:
    (portal_configuration.oauth2_client_id | default('', true) | length == 0) or
    (portal_configuration.oauth2_client_secret | default('', true) | length == 0)

- name: Identify Client Id for Discovery Portal (Fallback)
  set_fact:
    discovery_portal_oauth2_client_id: "{{ portal_configuration.oauth2_client_id }}"
    discovery_portal_oauth2_client_secret: "{{ portal_configuration.oauth2_client_secret }}"
  when:
    - portal_configuration.oauth2_client_id | default('', true) | length > 0
    - portal_configuration.oauth2_client_secret | default('', true) | length > 0

- name: Validate client credentials
  assert:
    that:
      - discovery_portal_oauth2_client_id | default('', true) | length > 0
      - discovery_portal_oauth2_client_secret | default('', true) | length > 0

- name: Find Out Customization Service Endpoint
  set_fact:
    customization_api_root: "{{ hub_configuration.protocol }}://{{ customization_configuration.hostname }}"
  when: hub_configuration.setup_customization_service

- name: Start Discovery Portal Service
  vars:
    default_environment_variables:
      VIRTUAL_HOST: "{{ portal_configuration.hostname }}"
      LETSENCRYPT_HOST: "{{ portal_configuration.hostname }}"
      API_ROOT: "{{ hub_configuration.protocol }}://{{ hub_configuration.primary_hostname }}"
      CUSTOMIZATION_API_ROOT: "{{ customization_api_root | default('', true) }}"
      OAUTH_CLIENT_ID: "{{ discovery_portal_oauth2_client_id }}"
      OAUTH_SECRET: "{{ discovery_portal_oauth2_client_secret }}"
      ENABLED_FEATURES: "{{ portal_configuration.enabled_features }}"
      SENTRY_DSN: "{{ portal_configuration.sentry_dsn }}"
  docker_container:
    name: "{{ container_names.discovery_portal }}"
    image: "{{ image_versions.portal }}"
    # pull image if version is latest
    pull: "{{ (image_versions.portal | default(':', True)).split(':')[1] == 'latest' }}"
    restart_policy: unless-stopped
    exposed_ports:
      - "80"
    env: "{{ default_environment_variables | combine(portal_configuration.extra_environment_variables) }}"
    networks_cli_compatible: true
    networks:
      - name: "{{ network_names.main }}"
    labels:
      {
        traefik.enable: "true",
        traefik.http.routers.portal.rule: "Host(`{{ portal_hostname }}`)",
        traefik.http.routers.portal.entrypoints: "traefik_proxy-secured",
        traefik.http.routers.portal.tls.certresolver: "mytlschallenge",
      }
