---
- name: Get Client Credentials for Discovery Portal Service
  shell: "{{ lookup('template', 'run_in_django_shell.sh.j2') }}" # noqa 305
  vars:
    python_script_name: get_oauth_client_credentials
    client_name: Application Discovery Portal
    redirect_uris:
      - "{{ hub_configuration.protocol }}://%s/hub/callback/' % '{{ portal_configuration.hostname }}"
  register: discovery_portal_oauth2_client_output
  changed_when: discovery_portal_oauth2_client_output.stdout | from_json | json_query('changed')
  when: (portal_configuration.oauth2_client_id is not defined or not portal_configuration.oauth2_client_id) or
        (portal_configuration.oauth2_client_secret is not defined or not portal_configuration.oauth2_client_secret)

- name: Identify Client Id for Discovery Portal
  set_fact:
    discovery_portal_oauth2_client_id: "{{ discovery_portal_oauth2_client_output.stdout | from_json | json_query('client_id') }}"
    discovery_portal_oauth2_client_secret: "{{ discovery_portal_oauth2_client_output.stdout | from_json | json_query('client_secret') }}"
  when: (portal_configuration.oauth2_client_id is not defined or not portal_configuration.oauth2_client_id) or
        (portal_configuration.oauth2_client_secret is not defined or not portal_configuration.oauth2_client_secret)

- name: Identify Client Id for Discovery Portal (Fallback)
  set_fact:
    discovery_portal_oauth2_client_id: "{{ portal_configuration.oauth2_client_id }}"
    discovery_portal_oauth2_client_secret: "{{ portal_configuration.oauth2_client_secret }}"
  when:
    - portal_configuration.oauth2_client_id is defined and portal_configuration.oauth2_client_id
    - portal_configuration.oauth2_client_secret is defined and portal_configuration.oauth2_client_secret

- name: Validate client credentials
  assert:
    that:
      - discovery_portal_oauth2_client_id is defined
      - discovery_portal_oauth2_client_id|length
      - discovery_portal_oauth2_client_secret is defined
      - discovery_portal_oauth2_client_secret|length

- name: Start Discovery Portal Service
  docker_container:
    name: "{{ container_names.discovery_portal }}"
    image: "{{ image_versions.portal }}"
    restart_policy: unless-stopped
    exposed_ports:
      - "80"
    env:
      VIRTUAL_HOST: "{{ portal_configuration.hostname }}"
      LETSENCRYPT_HOST: "{{ portal_configuration.hostname }}"
      API_ROOT: "{{ hub_configuration.protocol }}://{{ hub_configuration.hostname }}"
      # yamllint disable rule:line-length
      OAUTH_CLIENT_ID: "{{ discovery_portal_oauth2_client_id }}"
      OAUTH_SECRET: "{{ discovery_portal_oauth2_client_secret }}"
      # yamllint enable rule:line-length
    networks_cli_compatible: true
    networks:
      - name: "{{ network_names.main }}"
