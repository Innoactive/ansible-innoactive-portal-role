---
- name: Get Client Credentials for Session Management Service
  block:
    - name: Create / Determine existing client credentials in Application
      shell: "{{ lookup('template', 'run_in_django_shell.sh.j2') }}" # noqa 305
      vars:
        python_script_name: get_oauth_client_credentials
        authorization_type: GRANT_TOKEN_EXCHANGE
        client_name: Session Management Service
        client_id: "{{ session_management_configuration.oauth2_client_id }}"
        client_secret: "{{ session_management_configuration.oauth2_client_secret }}"
        redirect_uris: []
      register: session_management_oauth2_client_output
      changed_when: session_management_oauth2_client_output.stdout | from_json | json_query('changed')
      # ansible lint has an issue where it cannot bypass rules (like 305) within blocks
      # see https://github.com/ansible/ansible-lint/issues/484, so we need to explicitly skip
      tags:
        - skip_ansible_lint
        - requires_database

    - name: Identify Client Id for Session Management Service
      set_fact:
        session_management_oauth2_client_id: "{{ session_management_oauth2_client_output.stdout | from_json | json_query('client_id') }}"
        session_management_oauth2_client_secret: "{{ session_management_oauth2_client_output.stdout | from_json | json_query('client_secret') }}"

- name: Validate client credentials
  assert:
    that:
      - session_management_oauth2_client_id | default('', true) | length > 0
      - session_management_oauth2_client_secret | default('', true) | length > 0

- name: Start Session Management container
  docker_container:
    name: "{{ container_names.session_management }}"
    image: "{{ image_versions.session_management }}"
    restart_policy: unless-stopped
    network_mode: default
    pull: "{{ 'latest' in image_versions.session_management }}"
    labels:
      traefik.enable: "true"
      traefik.http.routers.session_management.rule: Host(`{{ session_management_configuration.hostname }}`)
      traefik.http.routers.session_management.tls: "true"
      traefik.http.routers.session_management.tls.certresolver: lets-encrypt
    env:
      OAuth__UseTokenCache: "true"
      PortalBackend__BaseUrl: "{{ admin_configuration.protocol }}://{{ admin_hostname }}"
      PortalBackend__ClientId: "{{ session_management_oauth2_client_id }}"
      PortalBackend__ClientSecret: "{{ session_management_oauth2_client_secret }}"
      IpLookupService__ApiToken: "{{ session_management_configuration.ip_stack_api_token }}"
      CloudXRManagement__BaseUrl: "http://{{ container_names.cloudxr_management }}:5000"
      Sentry__Dsn: "{{ session_management_configuration.sentry_dsn }}"
      Sentry__ServerName: "{{ portal_configuration.hostname }}"
      AdaptiveInstanceScaling__Enabled: "{{ session_management_configuration.adaptive_instance_scaling.enabled | ternary('true', 'false') }}"
      AdaptiveInstanceScaling__UserScaleRatio: "{{ session_management_configuration.adaptive_instance_scaling.user_scale_ratio }}"
      AdaptiveInstanceScaling__MaxInstancesPerRegion: "{{ session_management_configuration.adaptive_instance_scaling.max_instances_per_region }}"
      AdaptiveInstanceScaling__ConnectionIsIdleAfterMin: "{{ session_management_configuration.adaptive_instance_scaling.connection_is_idle_after_min }}"
      SessionWorkers__CloudRenderedSession__Enabled: "{{  session_management_configuration.cloud_rendering_enabled | ternary('true', 'false') }}"
      CorsOrigins: "{{ session_management_configuration.cors_origins | default(admin_configuration.protocol + '://' + portal_hostname, true) }}"
      Serilog__MinimumLevel__Default: "{{ session_management_configuration.log_level | default('Warning', true) }}"
      ASPNETCORE_ENVIRONMENT: "{{ session_management_configuration.environment | default('Production', true) }}"

    networks_cli_compatible: true
    networks:
      - name: "{{ network_names.main }}"
